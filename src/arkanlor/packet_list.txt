from http://docs.polserver.com/packets/

Both
[0x0C] Edit Tile Data (God Client)
[0x15] Follow
[0x22] Character Move ACK/ Resync Request
[0x2C] Resurrection Menu
[0x39] Remove (Group)
[0x3A] Send Skills
[0x56] Map Packet (cartography/treasure)
[0x66] Books (Pages)
[0x6C] Target Cursor Commands
[0x6F] Secure Trading
[0x71] Bulletin Board Messages
[0x72] Request War Mode
[0x73] Ping Message
[0x93] Book Header ( Old )
[0x95] Dye Window
[0x98] All Names (3D Client Only)
[0x99] Give Boat/House Placement View
[0x9A] Console Entry Prompt
[0xB8] Request/Char Profile
[0xBB] Ultima Messenger
[0xBD] Client Version
[0xBE] Assist Version
[0xBF] General Information Packet
[0xC2] Unicode TextEntry
[0xC8] Client View Range
[0xC9] Get Area Server Ping (God Client)
[0xCA] Get User Server Ping (God Client)
[0xD0] Configuration File
[0xD1] Logout Status
[0xD4] Book Header ( New )
[0xD6] Mega Cliloc
[0xD7] Generic AOS Commands
[0xF1] Freeshard List
[-]
Client
[0x00] Create Character
[0x01] Disconnect Notification
[0x02] Move Request
[0x03] Talk Request
[0x04] Request God Mode (God Client)
[0x05] Request Attack
[0x06] Double Click
[0x07] Pick Up Item
[0x08] Drop Item
[0x09] Single Click
[0x0A] Edit (God Client)
[0x12] Request Skill etc use
[0x13] Drop->Wear Item
[0x14] Send Elevation (God Client)
[0x1E] Control Animation
[0x34] Get Player Status
[0x35] Add Resource (God Client)
[0x37] Move Item (God Client)
[0x38] Pathfinding in Client
[0x3B] Buy Item(s)
[0x45] Version OK
[0x46] New Artwork
[0x47] New Terrain
[0x48] New Animation
[0x49] New Hues
[0x4A] Delete Art
[0x4B] Check Client Version
[0x4C] Script Names
[0x4D] Edit Script File
[0x50] Board Header
[0x51] Board Message
[0x52] Board Post Message
[0x57] Update Regions
[0x58] Add Region
[0x59] New Context FX
[0x5A] Update Context FX
[0x5C] Restart Version
[0x5D] Login Character
[0x5E] Server Listing
[0x5F] Server List Add Entry
[0x60] Server List Remove Entry
[0x61] Remove Static Object
[0x62] Move Static Object
[0x63] Load Area
[0x64] Load Area Request
[0x69] Change Text/Emote Colors
[0x75] Rename Character
[0x7D] Response To Dialog Box
[0x80] Login Request
[0x83] Delete Character
[0x8D] Character Creation ( KR + SA 3D clients only )
[0x91] Game Server Login
[0x9B] Request Help
[0x9F] Sell List Reply
[0xA0] Select Server
[0xA4] Client Spy
[0xA7] Request Tip/Notice Window
[0xAC] Gump Text Entry Dialog Reply
[0xAD] Unicode/Ascii speech request
[0xB1] Gump Menu Selection
[0xB3] Chat Text
[0xB5] Open Chat Window
[0xB6] Send Help/Tip Request
[0xC5] Invalid Map (Request?)
[0xD9] Spy On Client
[0xE0] Bug Report (KR)
[0xE1] Client Type (KR/SA)
[0xEC] Equip Macro (KR)
[0xED] Unequip Item Macro (KR)
[0xEF] KR/2D Client Login/Seed
[0xF8] Character Creation ( 7.0.16.0 )
[-]
Server
[0x0B] Damage
[0x11] Status Bar Info
[0x16] New Health bar status update (SA)
[0x17] Health bar status update (KR)
[0x1A] Object Info
[0x1B] Char Locale and Body
[0x1C] Send Speech
[0x1D] Delete Object
[0x1F] Explosion
[0x20] Draw Game Player
[0x21] Char Move Rejection
[0x23] Dragging Of Item
[0x24] Draw Container
[0x25] Add Item To Container
[0x26] Kick Player
[0x27] Reject Move Item Request
[0x28] Drop Item Failed/Clear Square (God Client?)
[0x29] Drop Item Approved
[0x2A] Blood
[0x2B] God Mode (God Client)
[0x2D] Mob Attributes
[0x2E] Worn Item
[0x2F] Fight Occuring
[0x30] Attack Ok
[0x31] Attack Ended
[0x32] Unknown
[0x33] Pause Client
[0x36] Resource Tile Data (God Client
[0x3C] Add multiple Items In Container
[0x3E] Versions (God Client)
[0x3F] Update Statics (God Client)
[0x4E] Personal Light Level
[0x4F] Overall Light Level
[0x53] Reject Character Logon
[0x54] Play Sound Effect
[0x55] Login Complete
[0x5B] Time
[0x65] Set Weather
[0x6D] Play Midi Music
[0x6E] Character Animation
[0x70] Graphical Effect
[0x74] Open Buy Window
[0x76] New Subserver
[0x77] Update Player
[0x78] Draw Object
[0x7C] Open Dialog Box
[0x82] Login Denied
[0x86] Resend Characters After Delete
[0x88] Open Paperdoll
[0x89] Corpse Clothing
[0x8C] Connect To Game Server
[0x90] Map Message
[0x97] Move Player
[0x9C] Request Assistance
[0x9E] Sell List
[0xA1] Update Current Health
[0xA2] Update Current Mana
[0xA3] Update Current Stamina
[0xA5] Open Web Browser
[0xA6] Tip/Notice Window
[0xA8] Game Server List
[0xA9] Characters / Starting Locations
[0xAA] Allow/Refuse Attack
[0xAB] Gump Text Entry Dialog
[0xAE] Unicode Speech message
[0xAF] Display Death Action
[0xB0] Send Gump Menu Dialog
[0xB2] Chat Message
[0xB7] Help/Tip Data
[0xB9] Enable locked client features
[0xBA] Quest Arrow
[0xBC] Seasonal Information
[0xC0] Graphical Effect
[0xC1] Cliloc Message
[0xC4] Semivisible (Smurf it!)
[0xC6] Invalid Map Enable
[0xC7] 3D Particle Effect
[0xCB] Global Que Count
[0xCC] Cliloc Message Affix
[0xD2] Extended 0x20
[0xD3] Extended 0x78
[0xD8] Send Custom House
[0xDB] Character Transfer Log
[0xDC] SE Introduced Revision
[0xDD] Compressed Gump
[0xDE] Update Mobile Status
[0xDF] Buff/Debuff System
[0xE2] New Character Animation (KR)
[0xE3] KR Encryption Response
[0xF0] Krrios client special
[0xF3] Object Information (SA)
[0xF5] New Map Message


Compression Guide
Ultima Online packets are compressed using the Huffman compression algorithm. Packet compression is employed by the game server, but not the login server (i.e., it begins when the client connects to the shard with 0x91). Packet compression is sent only by the server, not the client.

To compress packets, the server uses a special binary tree which follows:

      static uint[,] bit_table = new uint[,]
      {
          {0x02, 0x00},     {0x05, 0x1F},   {0x06, 0x22},   {0x07, 0x34},   {0x07, 0x75},   {0x06, 0x28},   {0x06, 0x3B},   {0x07, 0x32}, 
          {0x08, 0xE0},     {0x08, 0x62},   {0x07, 0x56},   {0x08, 0x79},   {0x09, 0x19D},  {0x08, 0x97},   {0x06, 0x2A},   {0x07, 0x57}, 
          {0x08, 0x71},     {0x08, 0x5B},   {0x09, 0x1CC},  {0x08, 0xA7},   {0x07, 0x25},   {0x07, 0x4F},   {0x08, 0x66},   {0x08, 0x7D}, 
          {0x09, 0x191},    {0x09, 0x1CE},  {0x07, 0x3F},   {0x09, 0x90},   {0x08, 0x59},   {0x08, 0x7B},   {0x08, 0x91},   {0x08, 0xC6}, 
          {0x06, 0x2D},     {0x09, 0x186},  {0x08, 0x6F},   {0x09, 0x93},   {0x0A, 0x1CC},  {0x08, 0x5A},   {0x0A, 0x1AE},  {0x0A, 0x1C0}, 
          {0x09, 0x148},    {0x09, 0x14A},  {0x09, 0x82},   {0x0A, 0x19F},  {0x09, 0x171},  {0x09, 0x120},  {0x09, 0xE7},   {0x0A, 0x1F3}, 
          {0x09, 0x14B},    {0x09, 0x100},  {0x09, 0x190},  {0x06, 0x13},   {0x09, 0x161},  {0x09, 0x125},  {0x09, 0x133},  {0x09, 0x195}, 
          {0x09, 0x173},    {0x09, 0x1CA},  {0x09, 0x86},   {0x09, 0x1E9},  {0x09, 0xDB},   {0x09, 0x1EC},  {0x09, 0x8B},   {0x09, 0x85}, 
          {0x05, 0x0A},     {0x08, 0x96},   {0x08, 0x9C},   {0x09, 0x1C3},  {0x09, 0x19C},  {0x09, 0x8F},   {0x09, 0x18F},  {0x09, 0x91}, 
          {0x09, 0x87},     {0x09, 0xC6},   {0x09, 0x177},  {0x09, 0x89},   {0x09, 0xD6},   {0x09, 0x8C},   {0x09, 0x1EE},  {0x09, 0x1EB}, 
          {0x09, 0x84},     {0x09, 0x164},  {0x09, 0x175},  {0x09, 0x1CD},  {0x08, 0x5E},   {0x09, 0x88},   {0x09, 0x12B},  {0x09, 0x172}, 
          {0x09, 0x10A},    {0x09, 0x8D},   {0x09, 0x13A},  {0x09, 0x11C},  {0x0A, 0x1E1},  {0x0A, 0x1E0},  {0x09, 0x187},  {0x0A, 0x1DC}, 
          {0x0A, 0x1DF},    {0x07, 0x74},   {0x09, 0x19F},  {0x08, 0x8D},   {0x08, 0xE4},   {0x07, 0x79},   {0x09, 0xEA},   {0x09, 0xE1}, 
          {0x08, 0x40},     {0x07, 0x41},   {0x09, 0x10B},  {0x09, 0xB0},   {0x08, 0x6A},   {0x08, 0xC1},   {0x07, 0x71},   {0x07, 0x78}, 
          {0x08, 0xB1},     {0x09, 0x14C},  {0x07, 0x43},   {0x08, 0x76},   {0x07, 0x66},   {0x07, 0x4D},   {0x09, 0x8A},   {0x06, 0x2F}, 
          {0x08, 0xC9},     {0x09, 0xCE},   {0x09, 0x149},  {0x09, 0x160},  {0x0A, 0x1BA},  {0x0A, 0x19E},  {0x0A, 0x39F},  {0x09, 0xE5},
          {0x09, 0x194},    {0x09, 0x184},  {0x09, 0x126},  {0x07, 0x30},   {0x08, 0x6C},   {0x09, 0x121},  {0x09, 0x1E8},  {0x0A, 0x1C1}, 
          {0x0A, 0x11D},    {0x0A, 0x163},  {0x0A, 0x385},  {0x0A, 0x3DB},  {0x0A, 0x17D},  {0x0A, 0x106},  {0x0A, 0x397},  {0x0A, 0x24E}, 
          {0x07, 0x2E},     {0x08, 0x98},   {0x0A, 0x33C},  {0x0A, 0x32E},  {0x0A, 0x1E9},  {0x09, 0xBF},   {0x0A, 0x3DF},  {0x0A, 0x1DD}, 
          {0x0A, 0x32D},    {0x0A, 0x2ED},  {0x0A, 0x30B},  {0x0A, 0x107},  {0x0A, 0x2E8},  {0x0A, 0x3DE},  {0x0A, 0x125},  {0x0A, 0x1E8}, 
          {0x09, 0xE9},     {0x0A, 0x1CD},  {0x0A, 0x1B5},  {0x09, 0x165},  {0x0A, 0x232},  {0x0A, 0x2E1},  {0x0B, 0x3AE},  {0x0B, 0x3C6}, 
          {0x0B, 0x3E2},    {0x0A, 0x205},  {0x0A, 0x29A},  {0x0A, 0x248},  {0x0A, 0x2CD},  {0x0A, 0x23B},  {0x0B, 0x3C5},  {0x0A, 0x251}, 
          {0x0A, 0x2E9},    {0x0A, 0x252},  {0x09, 0x1EA},  {0x0B, 0x3A0},  {0x0B, 0x391},  {0x0A, 0x23C},  {0x0B, 0x392},  {0x0B, 0x3D5}, 
          {0x0A, 0x233},    {0x0A, 0x2CC},  {0x0B, 0x390},  {0x0A, 0x1BB},  {0x0B, 0x3A1},  {0x0B, 0x3C4},  {0x0A, 0x211},  {0x0A, 0x203}, 
          {0x09, 0x12A},    {0x0A, 0x231},  {0x0B, 0x3E0},  {0x0A, 0x29B},  {0x0B, 0x3D7},  {0x0A, 0x202},  {0x0B, 0x3AD},  {0x0A, 0x213}, 
          {0x0A, 0x253},    {0x0A, 0x32C},  {0x0A, 0x23D},  {0x0A, 0x23F},  {0x0A, 0x32F},  {0x0A, 0x11C},  {0x0A, 0x384},  {0x0A, 0x31C}, 
          {0x0A, 0x17C},    {0x0A, 0x30A},  {0x0A, 0x2E0},  {0x0A, 0x276},  {0x0A, 0x250},  {0x0B, 0x3E3},  {0x0A, 0x396},  {0x0A, 0x18F}, 
          {0x0A, 0x204},    {0x0A, 0x206},  {0x0A, 0x230},  {0x0A, 0x265},  {0x0A, 0x212},  {0x0A, 0x23E},  {0x0B, 0x3AC},  {0x0B, 0x393}, 
          {0x0B, 0x3E1},    {0x0A, 0x1DE},  {0x0B, 0x3D6},  {0x0A, 0x31D},  {0x0B, 0x3E5},  {0x0B, 0x3E4},  {0x0A, 0x207},  {0x0B, 0x3C7}, 
          {0x0A, 0x277},    {0x0B, 0x3D4},  {0x08, 0xC0},   {0x0A, 0x162},  {0x0A, 0x3DA},  {0x0A, 0x124},  {0x0A, 0x1B4},  {0x0A, 0x264}, 
          {0x0A, 0x33D},    {0x0A, 0x1D1},  {0x0A, 0x1AF},  {0x0A, 0x39E},  {0x0A, 0x24F},  {0x0B, 0x373},  {0x0A, 0x249},  {0x0B, 0x372}, 
          {0x09, 0x167},    {0x0A, 0x210},  {0x0A, 0x23A},  {0x0A, 0x1B8},  {0x0B, 0x3AF},  {0x0A, 0x18E},  {0x0A, 0x2EC},  {0x07, 0x62}, 
          {0x04, 0x0D}
      }
    
Data sent to the client can then be compressed using the following method: 

      byte[] Compress(byte[] source, int length)
      {
          byte[] retval = new byte[0];
          int nrBits = 0, cBits = 0, val = 0;
          byte current = 0;

          if(source == null || length == 0) return null;

          for(int i = 0; i < length; i++)
          {
              nrBits = (int)bit_table[source[i], 0] - 1;
              val = (int)bit_table[source[i], 1];

              for(int n = nrBits; n >= 0; n--)
              {
                  int x = (val >> n) % 2;
                  current <<= 1;
                  current += (byte)x;

                  cBits++;
                  if(cBits == 8)
                  {
                      byte[] temp = new byte[retval.Length + 1];
                      retval.CopyTo(temp, 0);
                      temp[temp.Length - 1] = current;
                      retval = new byte[temp.Length];
                      temp.CopyTo(retval, 0);
                      temp = null;
                      cBits = 0;
                  }
              }
          }

          nrBits = (int)bit_table[256, 0] - 1;
          val = (int)bit_table[256, 1];

          for(int n = nrBits; n >= 0; n--)
          {
              int x = (val >> n) % 2;
              current <<= 1;
              current += (byte)x;

              cBits++;
              if(cBits == 8)
              {
                  byte[] temp = new byte[retval.Length + 1];
                  retval.CopyTo(temp, 0);
                  temp[temp.Length - 1] = current;
                  retval = new byte[temp.Length];
                  temp.CopyTo(retval, 0);
                  temp = null;
                  cBits = 0;
              }
          }

          while(cBits != 0)
          {
              current <<= 1;
              cBits++;

              if(cBits == 8)
              {
                  byte[] temp = new byte[retval.Length + 1];
                  retval.CopyTo(temp, 0);
                  temp[temp.Length - 1] = current;
                  retval = new byte[temp.Length];
                  temp.CopyTo(retval, 0);
                  temp = null
                  cBits = 0;
              }
          }

          return retval;
      }
    
To decompress packets, a binary tree must be built. The following is a class that will be used for the tree: 

      public class BinaryNode
      {
          public bool IsLeaf = false;
          public int Value = 0;
          public BinaryNode Left = null;
          public BinaryNode Right = null;
      }
    
The tree must be created before decompressing a packet, and only needs to be made once. The following method will create the binary tree:

      static BinaryNode m_Tree = null;
      
      static void CreateTree()
      {
          m_Tree = new BinaryNode();
          int nrBits = 0, val = 0;
          BinaryNode current = m_Tree;

          for(int i = 0; i < 257; i++)
          {
              current = m_Tree;
              nrBits = (int)bit_table[i, 0] - 1;
              val = (int)bit_table[i, 1];

              for(int n = nrBits; n >= 0; n--)
              {
                  if((val >> n) % 2 == 1)
                  {
                      if(current.Left == null)
                          current.Left = new BinaryNode();
                      current = current.Left;
                  }
                  else
                  {
                      if(current.Right == null)
                          current.Right = new BinaryNode();
                      current = current.Right;
                  }
              }

              current.IsLeaf = true;
              current.Value = i;
          }
      }
    
After creating the binary tree, data can be decompressed using the following method:

      private byte[] Decompress(byte[] source)
      {
          byte[] retval = new byte[0];
          byte current = 0;
          int val = 0;
          BinaryNode currentNode = m_Tree;

          for(int i = 0; i < source.Length; i++)
          {
              current = source[i];

              for(int n = 7; n >= 0; n--)
              {
                  int x = (current >> n) % 2;

                  if(x == 0)
                      currentNode = currentNode.Right;
                  else
                      currentNode = currentNode.Left;

                  if(currentNode.IsLeaf)
                  {
                      val = currentNode.Value;
                      currentNode = m_Tree;

                      if(val == 256)
                          return retval;

                      byte[] temp = new byte[retval.Length + 1];
                      retval.CopyTo(temp, 0);
                      temp[temp.Length - 1] = (byte)val;
                      retval = new byte[temp.Length];
                      temp.CopyTo(retval, 0);
                      temp = null;
                  }
              }
          }

          return retval;
      }
    
And there you have it: packet compression and decompression!