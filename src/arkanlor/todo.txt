Packet unknown: 0x34 # done: getplayerblah
Packet unknown: 0xbd # done: clientversion
Packet unknown: 0xbf # EXTENDED WORK!
Packet unknown: 0x9  # done: singleclick
Packet unknown: 0x6  # done: doubleclick



The Twisted Reactor
The core piece of Twisted asynchronous framework is the Reactor class. This class implements support for managing multiple network connections and processing network operations for these connections in a reactive manner. It is this component that implements the concurrent asynchronous server model described previously. In applications that use Twisted, the reactor is in control of the application. It is told to run, and it takes over the application and calls user code when appropriate to react to events. In the example game code in this book, the reactor is used in a less intrusive manner. As games have their own main loop and prefer to remain in control of its execution, instead of passing control to the reactor, the example code initializes the reactor, and then calls an update method on it each iteration through the main loop. The code used to perform this update is shown here:
from twisted.internet import reactor

# update the network
reactor.runUntilCurrent()
reactor.doSelect(0)

def iterate(delay=0): (source)
Run the main loop's I/O polling function for a period of time.
This is most useful in applications where the UI is being drawn 
"as fast as possible", such as games. All pending IDelayedCalls will be called.

The reactor must have been started (via the run() method) 
prior to any invocations of this method. 
It must also be stopped manually after the last call to this method 
(via the stop() method). This method is not re-entrant: you must not call it recursively; 
in particular, you must not call it while the reactor is running.

If you need to perform some sort of activity every so often, then 
twisted.internet.task.LoopingCall allows you to do that, and the reactor will 
call the function you pass into it, at an interval you specify 
(though the resolution of this may not be as high as you might like). 